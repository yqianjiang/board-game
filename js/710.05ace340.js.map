{"version":3,"file":"js/710.05ace340.js","mappings":"oMAEA,MAAMA,EAAeC,KAAM,QAAa,mBAAmBA,EAAEA,KAAI,UAAcA,GACzEC,EAAa,CAAEC,MAAO,aACtBC,EAA2BJ,GAAa,KAAmB,IAAAK,GAAoB,KAAM,KAAM,SAAU,KACrGC,EAA2BN,GAAa,KAAmB,IAAAK,GAAoB,IAAK,KAAM,4FAA6F,KACvLE,EAAa,CAAEJ,MAAO,iBACtBK,GAA0B,QAAiB,SAC3CC,EAAa,CAAC,YACdC,EAAa,CAAEP,MAAO,aACtBQ,EAAa,CAAER,MAAO,QACtBS,EAAa,CAAET,MAAO,cACtBU,EAA4Bb,GAAa,KAAmB,IAAAK,GAAoB,IAAK,KAAM,gBAAiB,KAE5G,SAAUS,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQ,WAAc,QAAoB,MAAOlB,EAAY,CAC3DE,EACAE,GACA,IAAAD,GAAoB,MAAOE,EAAY,EACrC,IAAAF,GAAoB,OAAQ,KAAM,SAAU,QAAiBU,EAAKM,OAAQ,IAC1E,IAAAhB,GAAoB,OAAQ,KAAM,SAAU,QAAiBU,EAAKO,WAAY,IAC9E,IAAAjB,GAAoB,MAAO,KAAM,CAC/BG,GACA,SAAgB,IAAAH,GAAoB,QAAS,CAC3CkB,SAA2B,SAAjBR,EAAKS,UACf,sBAAuBR,EAAO,KAAOA,EAAO,GAAMS,GAAkBV,EAAKW,MAASD,GAClFE,KAAM,UACL,KAAM,EAAGlB,GAAa,CACvB,CAAC,KAAaM,EAAKW,WAGH,SAAnBX,EAAKS,YACD,WAAc,QAAoB,SAAU,CAC3CI,IAAK,EACLC,QAASb,EAAO,KAAOA,EAAO,GAE1C,IAAIc,IAAUZ,EAAOa,WAAab,EAAOa,aAAaD,KACzC,UACH,QAAoB,IAAI,GACR,YAAnBf,EAAKS,YACD,WAAc,QAAoB,SAAU,CAC3CI,IAAK,EACLC,QAASb,EAAO,KAAOA,EAAO,GAE1C,IAAIc,IAAUZ,EAAOc,YAAcd,EAAOc,cAAcF,KAC3C,SACiB,WAAnBf,EAAKS,YACH,WAAc,QAAoB,SAAU,CAC3CI,IAAK,EACLC,QAASb,EAAO,KAAOA,EAAO,GAE5C,IAAIc,IAAUZ,EAAOe,YAAcf,EAAOe,cAAcH,KACzC,UACH,QAAoB,IAAI,GACV,SAAnBf,EAAKS,YACD,WAAc,QAAoB,SAAU,CAC3CI,IAAK,EACLC,QAASb,EAAO,KAAOA,EAAO,GAE1C,IAAIc,IAAUZ,EAAOgB,aAAehB,EAAOgB,eAAeJ,KAC7C,YACH,QAAoB,IAAI,MAE9B,IAAAzB,GAAoB,MAAOK,EAAY,EACrC,IAAAL,GAAoB,MAAOM,EAAY,GACpC,SAAW,IAAO,QAAoB,KAAW,MAAM,QAAYO,EAAOiB,cAAc,CAACC,EAAKC,MACrF,WAAc,QAAoB,MAAO,CAC/CT,IAAKS,EACLlC,MAAO,OACN,GACA,SAAW,IAAO,QAAoB,KAAW,MAAM,QAAYiC,GAAK,CAACE,EAAMC,MACtE,WAAc,QAAoB,MAAO,CAC/CX,IAAKW,EACLpC,OAAO,QAAgB,CAAC,OAAQ,CAAE,UAAoB,WAATmC,MAC5C,KAAM,MACP,WAEJ,SAEN,IAAAjC,GAAoB,MAAOO,EAAY,CACrCC,IACC,SAAW,IAAO,QAAoB,KAAW,MAAM,QAAYE,EAAKyB,WAAYJ,KAC3E,WAAc,QAAoB,MAAO,CAC/CR,IAAKQ,EAAI,GACTjC,MAAO,OACN,GACA,SAAW,IAAO,QAAoB,KAAW,MAAM,QAAYiC,GAAME,KAChE,WAAc,QAAoB,MAAO,CAC/CV,IAAKU,EACLnC,OAAO,QAAgB,CAAC,OAAQ,CAAE,UAAWmC,MAC5C,KAAM,MACP,WAEJ,Y,cC7FG,SAASG,EAAgBC,EAAKd,EAAKe,GAYhD,OAXIf,KAAOc,EACTE,OAAOC,eAAeH,EAAKd,EAAK,CAC9Be,MAAOA,EACPG,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZN,EAAId,GAAOe,EAGND,ECLT,MAAMO,EAAc,CAClB,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,IAEN,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,GACD,CAAC,GACD,CAAC,GACD,CAAC,KAIS,MAAOC,EAGnBC,YAAYC,EAAgBC,GAAc,sBACxCC,KAAKC,KAAOD,KAAKE,WAAWJ,EAAQC,GAItCG,WAAWJ,EAAgBC,GAEzB,MAAME,EAAa,GAGnB,IAAK,IAAInB,EAAM,EAAGA,EAAMgB,EAAQhB,IAAO,CAErCmB,EAAKnB,GAAO,GAGZ,IAAK,IAAIE,EAAO,EAAGA,EAAOe,EAAQf,IAEhCiB,EAAKnB,GAAKE,GAAQ,GAKtB,OAAOiB,EAITE,cAEE,MAAM9B,EAAO+B,KAAKC,MAAMD,KAAKE,SAAWX,EAAYY,QAGpD,OAAOZ,EAAYtB,GAIrBmC,UAAUP,EAAYQ,EAAmBC,EAAWC,GAGlD,IAAK,IAAI7B,EAAM,EAAGA,EAAM2B,EAAMF,OAAQzB,IAEpC,IAAK,IAAIE,EAAO,EAAGA,EAAOyB,EAAM3B,GAAKyB,OAAQvB,IAE3C,GAAyB,IAArByB,EAAM3B,GAAKE,GAAa,CAC1B,MAAM4B,EAAeF,EAAI1B,EACnB6B,EAAeF,EAAI7B,EAEzB,GAAI8B,EAAe,GAAKA,GAAgBX,EAAK,GAAGM,QAAUM,GAAgBZ,EAAKM,OAE7E,OADAO,QAAQC,IAAI,wCACL,EAIT,GAAIF,GAAgB,GAA0C,KAArCZ,EAAKY,GAAcD,GAE1C,OADAE,QAAQC,IAAI,+BAAgCF,EAAcD,IACnD,EAOf,OAAO,EAITI,eAAef,EAAYQ,EAAcC,EAAWC,GAElD,IAAK,IAAI7B,EAAM,EAAGA,EAAM2B,EAAMF,OAAQzB,IAEpC,IAAK,IAAIE,EAAO,EAAGA,EAAOyB,EAAM3B,GAAKyB,OAAQvB,IAElB,IAArByB,EAAM3B,GAAKE,KAEbiB,EAAKU,EAAI7B,GAAK4B,EAAI1B,GAAQ,IAOlCiC,UAAUhB,EAAYQ,EAAcC,EAAWC,GAE7C,IAAK,IAAI7B,EAAM,EAAGA,EAAM2B,EAAMF,OAAQzB,IAEpC,IAAK,IAAIE,EAAO,EAAGA,EAAOyB,EAAM3B,GAAKyB,OAAQvB,IAElB,IAArByB,EAAM3B,GAAKE,KAEbiB,EAAKU,EAAI7B,GAAK4B,EAAI1B,GAAQ,UAOlCkC,OAAOC,EAAYlB,EAAYQ,EAAcC,EAAWC,GAKtDQ,EAAMC,OAASV,EACfS,EAAME,OAASV,EAOjBW,OAAOb,GAEL,MAAMc,EAAuB,GAG7B,IAAK,IAAIvC,EAAO,EAAGA,EAAOyB,EAAM,GAAGF,OAAQvB,IAAQ,CAEjDuC,EAASvC,GAAQ,GAGjB,IAAK,IAAIF,EAAM2B,EAAMF,OAAS,EAAGzB,GAAO,EAAGA,IAEzCyC,EAASvC,GAAMwC,KAAKf,EAAM3B,GAAKE,IAKnC,OAAOuC,EAITE,WAAWxB,GACT,IAAIyB,EAAkB,EAEtB,IAAK,IAAI5C,EAAM,EAAGA,EAAMmB,EAAKM,OAAQzB,IAE/BmB,EAAKnB,GAAK6C,OAAO3C,GAAkB,KAATA,MAE5BiB,EAAK2B,OAAO9C,EAAK,GACjB4C,GAAmB,GAGnBzB,EAAK4B,QAAQ,IAAIC,MAAM,IAAIC,KAAK,MAGpC,OAAOL,GC5LX,MAAOM,EAAQC,GAAU,CAAC,GAAI,IACxBC,EAAS,IAAItC,EAAOoC,EAAQC,GAElC,OACEE,KAAM,SACNC,QAEE,MAAMjB,GAAQ,QAAS,CACrBlB,KAAMiC,EAAOhC,WAAW8B,EAAQC,GAChCxB,MAAOyB,EAAO/B,cACdiB,OAASa,EAAS,EAAK,EACvBZ,OAAQ,EACRnC,UAAWgD,EAAO/B,cAClBpC,MAAO,EACPG,UAAW,OACXE,MAAO,EACPJ,UAAW,IAGb,IAAIqE,EAAgB,KAIpB,MAAMC,GAAY,QAAOnB,GAGnBtC,GAAe,SAAS,KAE5B,MAAM0D,EAA2BpB,EAAMlB,KAAKuC,KAAI9B,GAAG,IAAIA,KAEvD,GAAsB,SAAlBS,EAAMjD,UAAoB,OAAOqE,EAGrC,IAAK,IAAIzD,EAAM,EAAGA,EAAMqC,EAAMV,MAAMF,OAAQzB,IAE1C,IAAK,IAAIE,EAAO,EAAGA,EAAOmC,EAAMV,MAAM3B,GAAKyB,OAAQvB,IAElB,IAA3BmC,EAAMV,MAAM3B,GAAKE,KAEnBuD,EAAMpB,EAAME,OAASvC,GAAKqC,EAAMC,OAASpC,GAAQ,UAMvD,OAAOuD,KAGH9D,EAAY,KAChB0C,EAAMjD,UAAY,UAClBiD,EAAMV,MAAQU,EAAMjC,UACpBiC,EAAMjC,UAAYgD,EAAO/B,cAEzBkC,EAAWI,YAAYC,EAAQtC,KAAKC,MAAM,IAAKc,EAAM/C,QAErDuE,SAASC,iBAAiB,UAAWC,IAGjCnE,EAAa,KACjByC,EAAMjD,UAAY,SAGlB4E,cAAcT,GAGdM,SAASI,oBAAoB,UAAWF,IAGpClE,EAAa,KACjBwC,EAAMjD,UAAY,UAGlBmE,EAAWI,YAAYC,EAAQtC,KAAKC,MAAM,IAAKc,EAAM/C,QAGrDuE,SAASC,iBAAiB,UAAWC,IAGjCjE,EAAc,KAClBuC,EAAMjD,UAAY,OAEdiD,EAAMpD,MAAQoD,EAAMnD,YACtBmD,EAAMnD,UAAYmD,EAAMpD,OAI1BoD,EAAMlB,KAAOiC,EAAOhC,WAAW8B,EAAQC,GACvCd,EAAMV,MAAQyB,EAAO/B,cACrBgB,EAAMC,OAAS,EACfD,EAAME,OAAS,EACfF,EAAMjC,UAAYgD,EAAO/B,cACzBgB,EAAMpD,MAAQ,EAId+E,cAAcT,GAGdM,SAASI,oBAAoB,UAAWF,IAIpCH,EAAS,KACW,YAApBvB,EAAMjD,YAGNgE,EAAO1B,UAAUW,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,OAAS,GAEzEa,EAAOhB,OAAOC,EAAOA,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,OAAS,GAGvEF,EAAME,QAAU,GAElB2B,MAAM,SACNpE,MAGAsD,EAAOjB,UAAUE,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,QAG9DF,EAAMpD,OAASmE,EAAOT,WAAWN,EAAMlB,MAGvCkB,EAAMV,MAAQU,EAAMjC,UACpBiC,EAAMC,OAASa,EAAS,EAAI,EAC5Bd,EAAME,OAAS,EACfF,EAAMjC,UAAYgD,EAAO/B,iBAMzB8C,EAAW,CACfC,SAAU,KAEJhB,EAAO1B,UAAUW,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAS,EAAGD,EAAME,SAEpEa,EAAOhB,OAAOC,EAAOA,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAS,EAAGD,EAAME,SAG1E8B,UAAW,KAELjB,EAAO1B,UAAUW,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAS,EAAGD,EAAME,SAEpEa,EAAOhB,OAAOC,EAAOA,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAS,EAAGD,EAAME,SAG1E+B,SAAU,KAEJlB,EAAO1B,UAAUW,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,OAAS,IAEzEa,EAAOhB,OAAOC,EAAOA,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,OAAS,IAG/EC,OAAQ,KAENH,EAAMV,MAAQyB,EAAOZ,OAAOH,EAAMV,OAG7ByB,EAAO1B,UAAUW,EAAMlB,KAAMkB,EAAMV,MAAOU,EAAMC,OAAQD,EAAME,UAEjEF,EAAMV,MAAQyB,EAAOZ,OAAOH,EAAMV,OAClCU,EAAMV,MAAQyB,EAAOZ,OAAOH,EAAMV,OAClCU,EAAMV,MAAQyB,EAAOZ,OAAOH,EAAMV,UAKlCoC,EAAiBQ,IACnB,OAAQA,EAAM/E,KACZ,IAAK,YACH2E,EAASC,WACT,MAEF,IAAK,aACHD,EAASE,YACT,MAEF,IAAK,YACHF,EAASG,WACT,MAEF,IAAK,UACHH,EAAS3B,SACT,QAIR,MAAO,IACFgB,EACHzD,aAAAA,EACAJ,UAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,YAAAA,K,QC/LN,MAAM0E,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAAS9F,GAAQ,CAAC,YAAY,qBAEzF","sources":["webpack://board-games/./src/components/Tetris.vue?79a2","webpack://board-games/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://board-games/./src/utils/TetrisBoard.ts","webpack://board-games/./src/components/Tetris.vue?6916","webpack://board-games/./src/components/Tetris.vue"],"sourcesContent":["import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-da87b8de\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"game-wrap\" }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"俄罗斯方块\", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"请通过方向键控制下落的方块（方向键“上”可以顺时针旋转方块），使它们在底部排列成完整的水平行，一旦一行被填满，就会消失并腾出空间。目标是尽可能堆叠方块，避免屏幕顶部被方块堆满。\", -1))\nconst _hoisted_4 = { class: \"stack toolbar\" }\nconst _hoisted_5 = /*#__PURE__*/_createTextVNode(\"游戏速度：\")\nconst _hoisted_6 = [\"disabled\"]\nconst _hoisted_7 = { class: \"game-main\" }\nconst _hoisted_8 = { class: \"grid\" }\nconst _hoisted_9 = { class: \"next-piece\" }\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Next piece: \", -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _hoisted_2,\n    _hoisted_3,\n    _createElementVNode(\"div\", _hoisted_4, [\n      _createElementVNode(\"span\", null, \"当前分数：\" + _toDisplayString(_ctx.score), 1),\n      _createElementVNode(\"span\", null, \"最高得分：\" + _toDisplayString(_ctx.highScore), 1),\n      _createElementVNode(\"div\", null, [\n        _hoisted_5,\n        _withDirectives(_createElementVNode(\"input\", {\n          disabled: _ctx.gameState!=='over',\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.speed) = $event)),\n          type: \"number\"\n        }, null, 8, _hoisted_6), [\n          [_vModelText, _ctx.speed]\n        ])\n      ]),\n      (_ctx.gameState === 'over')\n        ? (_openBlock(), _createElementBlock(\"button\", {\n            key: 0,\n            onClick: _cache[1] || (_cache[1] = \n//@ts-ignore\n(...args) => ($setup.startGame && $setup.startGame(...args)))\n          }, \" 开始 \"))\n        : _createCommentVNode(\"\", true),\n      (_ctx.gameState === 'running')\n        ? (_openBlock(), _createElementBlock(\"button\", {\n            key: 1,\n            onClick: _cache[2] || (_cache[2] = \n//@ts-ignore\n(...args) => ($setup.pausedGame && $setup.pausedGame(...args)))\n          }, \" 暂停 \"))\n        : (_ctx.gameState === 'paused')\n          ? (_openBlock(), _createElementBlock(\"button\", {\n              key: 2,\n              onClick: _cache[3] || (_cache[3] = \n//@ts-ignore\n(...args) => ($setup.resumeGame && $setup.resumeGame(...args)))\n            }, \" 继续 \"))\n          : _createCommentVNode(\"\", true),\n      (_ctx.gameState !== 'over')\n        ? (_openBlock(), _createElementBlock(\"button\", {\n            key: 3,\n            onClick: _cache[4] || (_cache[4] = \n//@ts-ignore\n(...args) => ($setup.restartGame && $setup.restartGame(...args)))\n          }, \" 重新开始 \"))\n        : _createCommentVNode(\"\", true)\n    ]),\n    _createElementVNode(\"div\", _hoisted_7, [\n      _createElementVNode(\"div\", _hoisted_8, [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.combinedGrid, (row, idx) => {\n          return (_openBlock(), _createElementBlock(\"div\", {\n            key: idx,\n            class: \"row\"\n          }, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, j) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: j,\n                class: _normalizeClass([\"cell\", { 'color-1': cell === 'active'}])\n              }, null, 2))\n            }), 128))\n          ]))\n        }), 128))\n      ]),\n      _createElementVNode(\"div\", _hoisted_9, [\n        _hoisted_10,\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.nextPiece, (row) => {\n          return (_openBlock(), _createElementBlock(\"div\", {\n            key: row[0],\n            class: \"row\"\n          }, [\n            (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell) => {\n              return (_openBlock(), _createElementBlock(\"div\", {\n                key: cell,\n                class: _normalizeClass([\"cell\", { 'color-1': cell}])\n              }, null, 2))\n            }), 128))\n          ]))\n        }), 128))\n      ])\n    ])\n  ]))\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","// Define the grid data type\ntype Grid = (string | null)[][];\n\n// Define the type for a piece（是一个代表俄罗斯方块的二维数组）\ntype Piece = number[][];\n\n// Define the possible piece types\nconst PIECE_TYPES = [\n  [\n    [1, 1],\n    [1, 1],\n  ],\n  [\n    [0, 1, 0],\n    [1, 1, 1],\n  ],\n  [\n    [1, 0],\n    [1, 0],\n    [1, 1],\n  ],\n  [\n    [0, 1],\n    [0, 1],\n    [1, 1],\n  ],\n  [\n    [1, 1, 1],\n    [0, 1, 0],\n  ],\n  [\n    [1, 1, 0],\n    [0, 1, 1],\n  ],\n  [\n    [0, 1, 1],\n    [1, 1, 0],\n  ],\n  [\n    [1],\n    [1],\n    [1],\n    [1],\n  ],\n];\n\nexport default class Tetris {\n  grid: Grid;\n\n  constructor(n_rows: number, n_cols: number) {\n    this.grid = this.createGrid(n_rows, n_cols);\n  }\n\n  // Define a function to create the initial grid\n  createGrid(n_rows: number, n_cols: number): Grid {\n    // Create an empty grid\n    const grid: Grid = [];\n\n    // Loop through each row\n    for (let row = 0; row < n_rows; row++) {\n      // Create an empty row\n      grid[row] = [];\n\n      // Loop through each cell in the row\n      for (let cell = 0; cell < n_cols; cell++) {\n        // Add an empty cell\n        grid[row][cell] = \"\";\n      }\n    }\n\n    // Return the grid\n    return grid;\n  }\n\n  // Define a function to create a random piece\n  createPiece(): Piece {\n    // Select a random piece type\n    const type = Math.floor(Math.random() * PIECE_TYPES.length);\n\n    // Return the selected piece type\n    return PIECE_TYPES[type];\n  }\n\n  // Define a function to check if a piece can move to a new position\n  canMoveTo(grid: Grid, piece: number[][], x: number, y: number): boolean {\n    const ignore = piece;\n    // Loop through each row in the piece\n    for (let row = 0; row < piece.length; row++) {\n      // Loop through each cell in the row\n      for (let cell = 0; cell < piece[row].length; cell++) {\n        // Check if the cell is occupied\n        if (piece[row][cell] === 1) {\n          const targetBoardX = x + cell;\n          const targetBoardY = y + row;\n          // Check if the new position is outside the grid\n          if (targetBoardX < 0 || targetBoardX >= grid[0].length || targetBoardY >= grid.length) {\n            console.log(\"can't move because outside the grid\")\n            return false;\n          }\n\n          // Check if the new position is already occupied\n          if (targetBoardY >= 0 && grid[targetBoardY][targetBoardX] !== \"\") {\n            console.log(\"can't move because occupied:\", targetBoardY, targetBoardX)\n            return false;\n          }\n        }\n      }\n    }\n\n    // The piece can move to the new position\n    return true;\n  }\n\n  // Define a function to remove a piece from the grid\n  removeFromGrid(grid: Grid, piece: Piece, x: number, y: number): void {\n    // Loop through each row in the piece\n    for (let row = 0; row < piece.length; row++) {\n      // Loop through each cell in the row\n      for (let cell = 0; cell < piece[row].length; cell++) {\n        // Check if the cell is occupied\n        if (piece[row][cell] === 1) {\n          // Remove the cell from the grid\n          grid[y + row][x + cell] = \"\";\n        }\n      }\n    }\n  }\n\n  // Define a function to add a piece to the grid\n  addToGrid(grid: Grid, piece: Piece, x: number, y: number): void {\n    // Loop through each row in the piece\n    for (let row = 0; row < piece.length; row++) {\n      // Loop through each cell in the row\n      for (let cell = 0; cell < piece[row].length; cell++) {\n        // Check if the cell is occupied\n        if (piece[row][cell] === 1) {\n          // Add the cell to the grid\n          grid[y + row][x + cell] = \"active\";\n        }\n      }\n    }\n  }\n\n  // Define a function to move a piece to a new position\n  moveTo(state: any, grid: Grid, piece: Piece, x: number, y: number): void {\n    // Remove the piece from the grid\n    // this.removeFromGrid(grid, piece, state.pieceX, state.pieceY);\n    \n    // Update the piece position\n    state.pieceX = x;\n    state.pieceY = y;\n    \n    // Add the piece to the grid\n    // this.addToGrid(grid, piece, x, y);\n  }\n\n  // Define a function to rotate a piece clockwise\n  rotate(piece: number[][]): number[][] {\n    // Create a new piece array\n    const newPiece: number[][] = [];\n\n    // Loop through each cell in the piece\n    for (let cell = 0; cell < piece[0].length; cell++) {\n      // Create a new row in the new piece array\n      newPiece[cell] = [];\n\n      // Loop through each row in the piece\n      for (let row = piece.length - 1; row >= 0; row--) {\n        // Add the cell to the new row\n        newPiece[cell].push(piece[row][cell]);\n      }\n    }\n\n    // Return the rotated piece\n    return newPiece;\n  }\n\n  // Define a function to remove any full rows\n  removeRows(grid: Grid): number {\n    let scoresIncrement = 0;\n    // Loop through each row in the grid\n    for (let row = 0; row < grid.length; row++) {\n      // Check if the row is full\n      if (grid[row].every((cell) => cell !== \"\")) {\n        // Remove the row\n        grid.splice(row, 1);\n        scoresIncrement += 10;\n\n        // Add a new empty row at the top\n        grid.unshift(new Array(10).fill(\"\"));\n      }\n    }\n    return scoresIncrement;\n  }\n}\n","\nimport { reactive, toRefs, computed } from 'vue'\nimport Tetris from '@/utils/TetrisBoard'\n\nconst [N_ROWS, N_COLS] = [20, 10];\nconst tetris = new Tetris(N_ROWS, N_COLS);\n\nexport default {\n  name: 'Tetris',\n  setup() {\n    // Create a reactive state object\n    const state = reactive({\n      grid: tetris.createGrid(N_ROWS, N_COLS),\n      piece: tetris.createPiece(),\n      pieceX: (N_COLS / 2) - 2,\n      pieceY: 0,\n      nextPiece: tetris.createPiece(),\n      score: 0,\n      gameState: 'over',   // 'over' 未开始， 'running' 进行中， 'paused' 暂停中\n      speed: 3,\n      highScore: 0,\n    })\n\n    let interval: any = null;\n\n    // Convert the state object to a set of references\n    // that can be used in the template\n    const stateRefs = toRefs(state)\n    \n    // Define a computed property for the active piece\n    const combinedGrid = computed(() => {\n      // Create a new piece array\n      const grid_: (string|null)[][] = state.grid.map(x=>[...x]);\n      \n      if (state.gameState==='over') return grid_;\n\n      // Loop through each row in the state piece\n      for (let row = 0; row < state.piece.length; row++) {\n        // Loop through each cell in the row\n        for (let cell = 0; cell < state.piece[row].length; cell++) {\n          // Check if the cell is occupied\n          if (state.piece[row][cell] === 1) {\n            // Add the active class to the cell\n            grid_[state.pieceY + row][state.pieceX + cell] = 'active'\n          }\n        }\n      }\n      \n      // Return the new active piece\n      return grid_\n    })\n\n    const startGame = () => {\n      state.gameState = 'running';\n      state.piece = state.nextPiece;\n      state.nextPiece = tetris.createPiece();\n      // start the game loop\n      interval = setInterval(update, Math.floor(2000/state.speed))\n      // 监听玩家的按键操作\n      document.addEventListener('keydown', handleKeydown);\n    }\n\n    const pausedGame = () => {\n      state.gameState = 'paused';\n\n      // 清除定时器\n      clearInterval(interval);\n\n      // 移除玩家的按键操作监听器\n      document.removeEventListener('keydown', handleKeydown);\n    }\n\n    const resumeGame = () => {\n      state.gameState = 'running';\n\n      // 重新设置定时器\n      interval = setInterval(update, Math.floor(2000/state.speed))\n\n      // 监听玩家的按键操作\n      document.addEventListener('keydown', handleKeydown);\n    }\n\n    const restartGame = () => {\n      state.gameState = 'over';\n      \n      if (state.score > state.highScore) {\n        state.highScore = state.score;\n      }\n\n      // Reset the game\n      state.grid = tetris.createGrid(N_ROWS, N_COLS)\n      state.piece = tetris.createPiece()\n      state.pieceX = 0\n      state.pieceY = 0\n      state.nextPiece = tetris.createPiece()\n      state.score = 0\n\n\n      // 清除定时器\n      clearInterval(interval);\n\n      // 移除玩家的按键操作监听器\n      document.removeEventListener('keydown', handleKeydown);\n    }\n    \n    // Define a function to update the game state\n    const update = () => {\n      if (state.gameState !== 'running') return;\n\n      // Check if the piece can move down\n      if (tetris.canMoveTo(state.grid, state.piece, state.pieceX, state.pieceY + 1)) {\n        // Move the piece down\n        tetris.moveTo(state, state.grid, state.piece, state.pieceX, state.pieceY + 1)\n      } else {\n        // Check if the game is over\n        if (state.pieceY <= 0) {          \n          // Show the game over message\n          alert('游戏结束！')\n          restartGame()\n        } else {\n          // Add the piece to the grid\n          tetris.addToGrid(state.grid, state.piece, state.pieceX, state.pieceY)\n          \n          // Remove any full rows and increase the score\n          state.score += tetris.removeRows(state.grid)\n          \n          // Create a new piece\n          state.piece = state.nextPiece\n          state.pieceX = N_COLS / 2 - 2\n          state.pieceY = 0\n          state.nextPiece = tetris.createPiece()\n        }\n      }\n      \n    }\n    \n    const controls = {\n      moveLeft: () => {\n        // Check if the piece can move left\n        if (tetris.canMoveTo(state.grid, state.piece, state.pieceX - 1, state.pieceY)) {\n          // Move the piece left\n          tetris.moveTo(state, state.grid, state.piece, state.pieceX - 1, state.pieceY)\n        }\n      },\n      moveRight: () => {\n        // Check if the piece can move right\n        if (tetris.canMoveTo(state.grid, state.piece, state.pieceX + 1, state.pieceY)) {\n          // Move the piece right\n          tetris.moveTo(state, state.grid, state.piece, state.pieceX + 1, state.pieceY)\n        }\n      },\n      moveDown: () => {\n        // Check if the piece can move down\n        if (tetris.canMoveTo(state.grid, state.piece, state.pieceX, state.pieceY + 1)) {\n          // Move the piece down\n          tetris.moveTo(state, state.grid, state.piece, state.pieceX, state.pieceY + 1)\n        }\n      },\n      rotate: () => {\n        // Rotate the piece\n        state.piece = tetris.rotate(state.piece)\n        \n        // Check if the new piece position is valid\n        if (!tetris.canMoveTo(state.grid, state.piece, state.pieceX, state.pieceY)) {\n          // Revert the rotation\n          state.piece = tetris.rotate(state.piece)\n          state.piece = tetris.rotate(state.piece)\n          state.piece = tetris.rotate(state.piece)\n        }\n      }\n    }\n\n    const handleKeydown = (event: KeyboardEvent) => {\n        switch (event.key) {\n          case 'ArrowLeft':\n            controls.moveLeft();\n            break\n            \n          case 'ArrowRight':\n            controls.moveRight();\n            break\n            \n          case 'ArrowDown':\n            controls.moveDown();\n            break\n            \n          case 'ArrowUp':\n            controls.rotate();\n            break\n        }\n    }\n\n    return {\n      ...stateRefs,\n      combinedGrid,\n      startGame,\n      pausedGame,\n      resumeGame,\n      restartGame,\n    }\n  }\n}\n","import { render } from \"./Tetris.vue?vue&type=template&id=da87b8de&scoped=true&ts=true\"\nimport script from \"./Tetris.vue?vue&type=script&lang=ts\"\nexport * from \"./Tetris.vue?vue&type=script&lang=ts\"\n\nimport \"./Tetris.vue?vue&type=style&index=0&id=da87b8de&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/board-game/board-game/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-da87b8de\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_hoisted_1","class","_hoisted_2","_","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","render","_ctx","_cache","$props","$setup","$data","$options","score","highScore","disabled","gameState","$event","speed","type","key","onClick","args","startGame","pausedGame","resumeGame","restartGame","combinedGrid","row","idx","cell","j","nextPiece","_defineProperty","obj","value","Object","defineProperty","enumerable","configurable","writable","PIECE_TYPES","Tetris","constructor","n_rows","n_cols","this","grid","createGrid","createPiece","Math","floor","random","length","canMoveTo","piece","x","y","targetBoardX","targetBoardY","console","log","removeFromGrid","addToGrid","moveTo","state","pieceX","pieceY","rotate","newPiece","push","removeRows","scoresIncrement","every","splice","unshift","Array","fill","N_ROWS","N_COLS","tetris","name","setup","interval","stateRefs","grid_","map","setInterval","update","document","addEventListener","handleKeydown","clearInterval","removeEventListener","alert","controls","moveLeft","moveRight","moveDown","event","__exports__"],"sourceRoot":""}